[
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats kept the opposing team scoreless in four games\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(opponent scoreless) -> f_select_row(row 2, row 4, row 5, row 9) -> f_select_column(wildcats points, opponents, opponent scoreless) -> f_group_column(opponent scoreless) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats kept the opposing team scoreless in four games\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 2, row 4, row 5, row 9) -> f_select_column(opponents) -> f_group_column(opponents) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 2 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 3 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 4 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\n*/\nStatement: the wildcats kept the opposing team scoreless in four games\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) ->",
      "response": "f_select_column(opponents) -> f_group_column(opponents) -> <END>",
      "generate_operations": [
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | opponents\nrow 1 : 2 | 0\nrow 2 : 4 | 0\nrow 3 : 5 | 0\nrow 4 : 9 | 0\n*/\nStatement: the wildcats kept the opposing team scoreless in four games\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) -> f_select_column(game, opponents) ->",
      "response": "f_group_column(opponents) -> <END>",
      "generate_operations": [
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)",
        "f_group_column(opponents)"
      ],
      "last_operation": "group_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | opponents\nrow 1 : 2 | 0\nrow 2 : 4 | 0\nrow 3 : 5 | 0\nrow 4 : 9 | 0\n*/\nStatement: the wildcats kept the opposing team scoreless in four games\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) -> f_select_column(game, opponents) -> f_group_column(opponents) ->",
      "response": "f_sort_column(opponents) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)",
        "f_group_column(opponents)",
        "skip f_sort_column()"
      ],
      "last_operation": "group_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats never scored more than 7 in any game they lost\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 1, row 7, row 10) -> f_select_column(result, wildcats points) -> f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 3 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats never scored more than 7 in any game they lost\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) ->",
      "response": "f_select_column(result, wildcats points) -> f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(result, wildcats points)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : result | wildcats points\nrow 1 : loss | 7\nrow 2 : loss | 0\nrow 3 : loss | 6\n*/\nStatement: the wildcats never scored more than 7 in any game they lost\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) -> f_select_column(result, wildcats points) ->",
      "response": "f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(result, wildcats points)",
        "f_sort_column(wildcats points)"
      ],
      "last_operation": "sort_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats lost one game in september and two games in november\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_row(row 1, row 2, row 7, row 10) -> f_select_column(month, result) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats lost one game in september and two games in november\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 1, row 2, row 7, row 10) -> f_select_column(date, result) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 3 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats lost one game in september and two games in november\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) ->",
      "response": "f_select_column(date, result) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(game, date, result)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | result\nrow 1 : 1 | sept 20 | loss\nrow 2 : 7 | nov 1 | loss\nrow 3 : 10 | nov 22 | loss\n*/\nStatement: the wildcats lost one game in september and two games in november\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) -> f_select_column(game, date, result) ->",
      "response": "f_group_column(date) -> <END>",
      "generate_operations": [
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(game, date, result)",
        "skip f_group_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | result\nrow 1 : 1 | sept 20 | loss\nrow 2 : 7 | nov 1 | loss\nrow 3 : 10 | nov 22 | loss\n*/\nStatement: the wildcats lost one game in september and two games in november\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) -> f_select_column(game, date, result) ->",
      "response": "f_sort_column(date) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(game, date, result)",
        "skip f_group_column()",
        "skip f_sort_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats played two games in september , four games in october , and four games in november\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_row(*) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats played two games in september , four games in october , and four games in november\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_column(date, month) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_column(game, date)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date\nrow 1 : 1 | sept 20\nrow 2 : 2 | sept 27\nrow 3 : 3 | oct 4\nrow 4 : 4 | oct 11\nrow 5 : 5 | oct 18\nrow 6 : 6 | oct 25\nrow 7 : 7 | nov 1\nrow 8 : 8 | nov 8\nrow 9 : 9 | nov 15\nrow 10 : 10 | nov 22\n*/\nStatement: the wildcats played two games in september , four games in october , and four games in november\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_column(game, date) ->",
      "response": "f_add_column(month) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_column(game, date)",
        "skip f_group_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date\nrow 1 : 1 | sept 20\nrow 2 : 2 | sept 27\nrow 3 : 3 | oct 4\nrow 4 : 4 | oct 11\nrow 5 : 5 | oct 18\nrow 6 : 6 | oct 25\nrow 7 : 7 | nov 1\nrow 8 : 8 | nov 8\nrow 9 : 9 | nov 15\nrow 10 : 10 | nov 22\n*/\nStatement: the wildcats played two games in september , four games in october , and four games in november\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_column(game, date) ->",
      "response": "f_sort_column(date) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_column(game, date)",
        "skip f_group_column()",
        "skip f_sort_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the most the wildcats outscored an opponent is by 36 points\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_column(wildcats points, opponents) -> f_sort_column(wildcats points - opponents) -> <END>",
      "generate_operations": [
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "f_select_column(opponent, wildcats points, opponents)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : opponent | wildcats points | opponents\nrow 1 : ole miss | 7 | 14\nrow 2 : cincinnati | 20 | 0\nrow 3 : xavier | 20 | 7\nrow 4 : 9 georgia | 26 | 0\nrow 5 : 10 vanderbilt | 14 | 0\nrow 6 : michigan state | 7 | 6\nrow 7 : 18 alabama | 0 | 13\nrow 8 : west virginia | 15 | 6\nrow 9 : evansville | 36 | 0\nrow 10 : tennessee | 6 | 13\n*/\nStatement: the most the wildcats outscored an opponent is by 36 points\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_column(opponent, wildcats points, opponents) ->",
      "response": "f_sort_column(wildcats points - opponents) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "f_select_column(opponent, wildcats points, opponents)",
        "skip f_sort_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : opponent | wildcats points | opponents\nrow 1 : ole miss | 7 | 14\nrow 2 : cincinnati | 20 | 0\nrow 3 : xavier | 20 | 7\nrow 4 : 9 georgia | 26 | 0\nrow 5 : 10 vanderbilt | 14 | 0\nrow 6 : michigan state | 7 | 6\nrow 7 : 18 alabama | 0 | 13\nrow 8 : west virginia | 15 | 6\nrow 9 : evansville | 36 | 0\nrow 10 : tennessee | 6 | 13\n*/\nStatement: the most the wildcats outscored an opponent is by 36 points\nThe next operation must be one of f_group_column() or <END>.\nFunction Chain: f_select_column(opponent, wildcats points, opponents) ->",
      "response": "f_add_column(difference) -> f_sort_column(difference) -> f_select_row(row 9) -> <END>",
      "generate_operations": [
        "add_column",
        "sort_column",
        "select_row",
        "<END>"
      ],
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats kept the opposing team scoreless in ten games\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(opponent scoreless) -> f_select_row(row 2, row 4, row 5, row 9) -> f_select_column(wildcats points, opponents, opponent scoreless) -> f_group_column(opponent scoreless) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats kept the opposing team scoreless in ten games\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 2, row 4, row 5, row 6, row 8, row 9) -> f_select_column(opponents) -> f_group_column(opponents) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 2 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 3 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 4 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\n*/\nStatement: the wildcats kept the opposing team scoreless in ten games\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) ->",
      "response": "f_select_column(opponents) -> f_group_column(opponents) -> <END>",
      "generate_operations": [
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | opponents\nrow 1 : 2 | 0\nrow 2 : 4 | 0\nrow 3 : 5 | 0\nrow 4 : 9 | 0\n*/\nStatement: the wildcats kept the opposing team scoreless in ten games\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) -> f_select_column(game, opponents) ->",
      "response": "f_group_column(opponents) -> <END>",
      "generate_operations": [
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)",
        "f_group_column(opponents)"
      ],
      "last_operation": "group_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | opponents\nrow 1 : 2 | 0\nrow 2 : 4 | 0\nrow 3 : 5 | 0\nrow 4 : 9 | 0\n*/\nStatement: the wildcats kept the opposing team scoreless in ten games\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4) -> f_select_column(game, opponents) -> f_group_column(opponents) ->",
      "response": "f_sort_column(opponents) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4)",
        "f_select_column(game, opponents)",
        "f_group_column(opponents)",
        "skip f_sort_column()"
      ],
      "last_operation": "group_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats never scored more than 7 points in any game they won\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 2, row 3, row 4, row 5, row 6, row 8, row 9) -> f_select_column(result, wildcats points) -> f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3, row 4, row 5)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 2 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 3 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 4 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 5 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\n*/\nStatement: the wildcats never scored more than 7 points in any game they won\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4, row 5) ->",
      "response": "f_select_column(wildcats points) -> f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3, row 4, row 5)",
        "f_select_column(result, wildcats points)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : result | wildcats points\nrow 1 : win | 20\nrow 2 : win | 20\nrow 3 : win | 7\nrow 4 : win | 15\nrow 5 : win | 36\n*/\nStatement: the wildcats never scored more than 7 points in any game they won\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4, row 5) -> f_select_column(result, wildcats points) ->",
      "response": "f_sort_column(wildcats points) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "f_select_row(row 1, row 2, row 3, row 4, row 5)",
        "f_select_column(result, wildcats points)",
        "f_sort_column(wildcats points)"
      ],
      "last_operation": "sort_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats loss one game in november and two games in september\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_row(row 1, row 7, row 10) -> f_select_column(month, result) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats loss one game in november and two games in september\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_row(row 1, row 7, row 10) -> f_select_column(result, date) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 3 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats loss one game in november and two games in september\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) ->",
      "response": "f_select_column(date, result) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(date, result)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | result\nrow 1 : sept 20 | loss\nrow 2 : nov 1 | loss\nrow 3 : nov 22 | loss\n*/\nStatement: the wildcats loss one game in november and two games in september\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) -> f_select_column(date, result) ->",
      "response": "f_group_column(month) -> <END>",
      "generate_operations": [
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(date, result)",
        "skip f_group_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | result\nrow 1 : sept 20 | loss\nrow 2 : nov 1 | loss\nrow 3 : nov 22 | loss\n*/\nStatement: the wildcats loss one game in november and two games in september\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3) -> f_select_column(date, result) ->",
      "response": "f_sort_column(date) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3)",
        "f_select_column(date, result)",
        "skip f_group_column()",
        "skip f_sort_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats played four games in september , two games in october , and two games in november\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_row(*) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "group_column",
        "<END>"
      ],
      "next_operation": "add_column"
    },
    {
      "act_chain": [
        "skip f_add_column()"
      ],
      "last_operation": "<init>",
      "possible_next_operations": [
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the wildcats played four games in september , two games in october , and two games in november\nThe next operation must be one of f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_add_column(month) -> f_select_row(row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 8, row 9, row 10) -> f_select_column(date, month) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_row"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4, row 5, row 6)"
      ],
      "last_operation": "select_row",
      "possible_next_operations": [
        "select_column",
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 6 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\n*/\nStatement: the wildcats played four games in september , two games in october , and two games in november\nThe next operation must be one of f_select_column() or f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4, row 5, row 6) ->",
      "response": "f_add_column(month) -> f_select_column(month) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "select_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4, row 5, row 6)",
        "f_select_column(game, date)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date\nrow 1 : 1 | sept 20\nrow 2 : 2 | sept 27\nrow 3 : 3 | oct 4\nrow 4 : 4 | oct 11\nrow 5 : 8 | nov 8\nrow 6 : 9 | nov 15\n*/\nStatement: the wildcats played four games in september , two games in october , and two games in november\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4, row 5, row 6) -> f_select_column(game, date) ->",
      "response": "f_add_column(month) -> f_group_column(month) -> <END>",
      "generate_operations": [
        "add_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "skip f_add_column()",
        "f_select_row(row 1, row 2, row 3, row 4, row 5, row 6)",
        "f_select_column(game, date)",
        "skip f_group_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date\nrow 1 : 1 | sept 20\nrow 2 : 2 | sept 27\nrow 3 : 3 | oct 4\nrow 4 : 4 | oct 11\nrow 5 : 8 | nov 8\nrow 6 : 9 | nov 15\n*/\nStatement: the wildcats played four games in september , two games in october , and two games in november\nThe next operation must be one of f_sort_column() or <END>.\nFunction Chain: f_select_row(row 1, row 2, row 3, row 4, row 5, row 6) -> f_select_column(game, date) ->",
      "response": "f_group_column(date) -> <END>",
      "generate_operations": [
        "group_column",
        "<END>"
      ],
      "next_operation": "<END>"
    }
  ],
  [
    {
      "act_chain": [],
      "last_operation": "<init>",
      "possible_next_operations": [
        "add_column",
        "select_row",
        "select_column",
        "group_column",
        "sort_column"
      ],
      "prompt": "If the table does not have the needed column to tell whether the statement is True or False, we use f_add_column() to add a new column for it. For example,\n/*\ncol : rank | lane | player | time\nrow 1 :  | 5 | olga tereshkova (kaz) | 51.86\nrow 2 :  | 6 | manjeet kaur (ind) | 52.17\nrow 3 :  | 3 | asami tanno (jpn) | 53.04\n*/\nStatement: there are one athlete from japan.\nFunction: f_add_column(country of athlete)\nExplanation: The statement is about the number of athletes from japan. We need to known the country of each athlete. There is no column of the country of athletes. We add a column \"country of athlete\".\n\nIf the table only needs a few rows to tell whether the statement is True or False, we use f_select_row() to select these rows for it. For example,\n/*\ntable caption : jeep grand cherokee.\ncol : years | displacement | engine | power | torque\nrow 1 : 1999 - 2004 | 4.0l (242cid) | power tech i6 | - | 3000 rpm\nrow 2 : 1999 - 2004 | 4.7l (287cid) | powertech v8 | - | 3200 rpm\nrow 3 : 2002 - 2004 | 4.7l (287cid) | high output powertech v8 | - | -\nrow 4 : 1999 - 2001 | 3.1l diesel | 531 ohv diesel i5 | - | -\nrow 5 : 2002 - 2004 | 2.7l diesel | om647 diesel i5 | - | -\n*/\nStatement: the jeep grand cherokee with the om647 diesel i5 had the third lowest numbered displacement.\nFunction: f_select_row(row 1, row 4, row 5)\nExplanation: The statement wants to check the om647 diesel i5 had third lowest numbered displacement. We need to know the first three low numbered displacement and all rows that power is om647 diesel i5. We select the row 1, row 4, row 5.\n\nIf the table only needs a few columns to tell whether the statement is True or False, we use f_select_column() to select these columns for it. For example,\n/*\ncol : code | county | former province | area (km2) | population | capital\nrow 1 : 1 | mombasa | coast | 212.5 | 939,370 | mombasa (city)\nrow 2 : 2 | kwale | coast | 8,270.3 | 649,931 | kwale\nrow 3 : 3 | kilifi | coast | 12,245.9 | 1,109,735 | kilifi\n*/\nStatement: momasa is a county with population higher than 500000.\nFunction: f_select_column(county, population)\nExplanation: The statement wants to check momasa county with population higher than 500000. We need to know the county and its population. We select the column \"county\" and column \"population\".\n\nIf the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : game | date | opponent | result | wildcats points | opponents | record\nrow 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\nrow 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\nrow 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\nrow 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\nrow 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\nrow 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\nrow 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\nrow 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\nrow 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\nrow 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n*/\nStatement: the most the wildcats outscored an opponent is by 26 points\nThe next operation must be one of f_add_column() or f_select_row() or f_select_column() or f_group_column() or f_sort_column().\nFunction Chain: ",
      "response": "f_select_column(wildcats points, opponents) -> f_sort_column(wildcats points - opponents) -> <END>",
      "generate_operations": [
        "select_column",
        "sort_column",
        "<END>"
      ],
      "next_operation": "select_column"
    },
    {
      "act_chain": [
        "f_select_column(wildcats points, opponents)"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "sort_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nIf the statement is about the order of items in a column, we use f_sort_column() to sort the items. For example,\n/*\ncol : position | club | played | points\nrow 1 : 1 | malaga cf | 42 | 79\nrow 10 : 10 | cp merida | 42 | 59\nrow 3 : 3 | cd numancia | 42 | 73\n*/\nStatement: cd numancia placed in the last position.\nFunction: f_sort_column(position)\nExplanation: The statement wants to check about cd numancia in the last position. We need to know the order of position from last to front. We sort the rows according to column \"position\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : wildcats points | opponents\nrow 1 : 7 | 14\nrow 2 : 20 | 0\nrow 3 : 20 | 7\nrow 4 : 26 | 0\nrow 5 : 14 | 0\nrow 6 : 7 | 6\nrow 7 : 0 | 13\nrow 8 : 15 | 6\nrow 9 : 36 | 0\nrow 10 : 6 | 13\n*/\nStatement: the most the wildcats outscored an opponent is by 26 points\nThe next operation must be one of f_group_column() or f_sort_column() or <END>.\nFunction Chain: f_select_column(wildcats points, opponents) ->",
      "response": "f_sort_column(wildcats points - opponents) -> <END>",
      "generate_operations": [
        "sort_column",
        "<END>"
      ],
      "next_operation": "sort_column"
    },
    {
      "act_chain": [
        "f_select_column(wildcats points, opponents)",
        "skip f_sort_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "group_column",
        "<END>"
      ],
      "prompt": "If the statement is about items with the same value and the number of these items, we use f_group_column() to group the items. For example,\n/*\ncol : district | name | party | residence | first served\nrow 1 : district 1 | nelson albano | dem | vineland | 2006\nrow 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013†\nrow 3 : district 2 | john f. amodeo | rep | margate | 2008\n*/\nStatement: there are 5 districts are democratic\nFunction: f_group_column(party)\nExplanation: The statement wants to check 5 districts are democratic. We need to know the number of dem in the table. We group the rows according to column \"party\".\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : date | division | league | regular season | playoffs | open cup | avg. attendance\nrow 1 : 2001/01/02 | 2 | usl a-league | 4th, western | quarterfinals | did not qualify | 7,169\nrow 2 : 2002/08/06 | 2 | usl a-league | 2nd, pacific | 1st round | did not qualify | 6,260\nrow 5 : 2005/03/24 | 2 | usl first division | 5th | quarterfinals | 4th round | 6,028\n*/\nStatement: 2005 is the last year where this team was a part of the usl a-league?\nFunction Chain: f_add_column(year) -> f_select_row(row 1, row 2) -> f_select_column(year, league) -> f_sort_column(year) -> <END>\n\n*/\ncol : rank | lane | athlete | time\nrow 1 : 1 | 6 | manjeet kaur (ind) | 52.17\nrow 2 : 2 | 5 | olga tereshkova (kaz) | 51.86\nrow 3 : 3 | 4 | pinki pramanik (ind) | 53.06\n*/\nStatement: There are 10 athletes from India.\nFunction Chain: f_add_column(country of athletes) -> f_select_row(row 1, row 3) -> f_select_column(athlete, country of athletes) -> f_group_column(country of athletes) -> <END>\n\n/*\ncol : week | when | kickoff | opponent | results; final score | results; team record | game site | attendance\nrow 1 : 1 | saturday, april 13 | 7:00 p.m. | at rhein fire | w 27–21 | 1–0 | rheinstadion | 32,092\nrow 2 : 2 | saturday, april 20 | 7:00 p.m. | london monarchs | w 37–3 | 2–0 | waldstadion | 34,186\nrow 3 : 3 | sunday, april 28 | 6:00 p.m. | at barcelona dragons | w 33–29 | 3–0 | estadi olímpic de montjuïc | 17,503\n*/\nStatement: the competition with highest points scored is played on April 20.\nFunction Chain: f_add_column(points scored) -> f_select_row(*) -> f_select_column(when, points scored) -> f_sort_column(points scored) -> <END>\n\n/*\ncol : iso/iec standard | status | wg\nrow 1 : iso/iec tr 19759 | published (2005) | 20\nrow 2 : iso/iec 15288 | published (2008) | 7\nrow 3 : iso/iec 12207 | published (2011) | 7\n*/\nStatement: 2 standards are published in 2011\nFunction Chain: f_add_column(year) -> f_select_row(row 3) -> f_select_column(year) -> f_group_column(year) -> <END>\n\nHere are examples of using the operations to tell whether the statement is True or False.\n\n/*\ncol : wildcats points | opponents\nrow 1 : 7 | 14\nrow 2 : 20 | 0\nrow 3 : 20 | 7\nrow 4 : 26 | 0\nrow 5 : 14 | 0\nrow 6 : 7 | 6\nrow 7 : 0 | 13\nrow 8 : 15 | 6\nrow 9 : 36 | 0\nrow 10 : 6 | 13\n*/\nStatement: the most the wildcats outscored an opponent is by 26 points\nThe next operation must be one of f_group_column() or <END>.\nFunction Chain: f_select_column(wildcats points, opponents) ->",
      "response": "f_add_column(difference) -> f_sort_column(difference) -> f_group_column(difference) -> <END>",
      "generate_operations": [
        "add_column",
        "sort_column",
        "group_column",
        "<END>"
      ],
      "next_operation": "group_column"
    },
    {
      "act_chain": [
        "f_select_column(wildcats points, opponents)",
        "skip f_sort_column()",
        "skip f_group_column()"
      ],
      "last_operation": "select_column",
      "possible_next_operations": [
        "<END>"
      ],
      "prompt": null,
      "response": null,
      "generate_operations": null,
      "next_operation": "<END>"
    }
  ]
]